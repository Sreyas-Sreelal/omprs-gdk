use super::Player;
use omp_codegen::native;
use std::ffi::c_void;

use crate::{
    actors::Actor,
    menus::Menu,
    objects::{Object, PlayerObject},
    vehicles::Vehicle,
};

native!(Player_SetSpawnInfo, player: struct Player, team: u8, skin: i32, x: f32, y: f32, z: f32, angle: f32, weapon1: u8, ammo1: u32, weapon2: u8, ammo2: u32, weapon3: u8, ammo3: u32, -> bool);
native!(Player_GetSpawnInfo, player: struct Player, team: mut u8, skin: mut i32, x: mut f32, y: mut f32, z: mut f32, angle: mut f32, weapon1: mut u8, ammo1: mut u32, weapon2: mut u8, ammo2: mut u32, weapon3: mut u8, ammo3: mut u32, -> bool);
native!(Player_GetNetworkStats, player: struct Player, output: mut str, output_len: usize, -> i32);
native!(Player_NetStatsBytesReceived, player: struct Player, -> i32);
native!(Player_NetStatsBytesSent, player: struct Player, -> i32);
native!(Player_NetStatsConnectionStatus, player: struct Player, -> i32);
native!(Player_NetStatsGetConnectedTime, player: struct Player, -> i32);
native!(Player_NetStatsGetIpPort, player: struct Player, output: mut str, output_len: usize, -> bool);
native!(Player_NetStatsMessagesReceived, player: struct Player, -> i32);
native!(Player_NetStatsMessagesRecvPerSecond, player: struct Player, -> i32);
native!(Player_NetStatsMessagesSent, player: struct Player, -> i32);
native!(Player_NetStatsPacketLossPercent, player: struct Player, -> f32);
native!(Player_GetCustomSkin, player: struct Player, -> i32);
native!(Player_GetDialog, player: struct Player, -> i32);
native!(Player_GetDialogData, player: struct Player, dialogid: mut i32, style: mut i32, title: mut str, title_len: usize, body: mut str, body_len: usize, button1: mut str, button1_len: usize, button2: mut str, button2_len: usize, -> bool);
native!(Player_GetMenu, player: struct Player, -> struct Menu);
native!(Player_GetSurfingPlayerObject, player: struct Player, -> struct Player);
native!(Player_GetCameraTargetPlayerObject, player: struct Player, -> struct Player);
native!(Player_FromID, playerid: i32, -> struct Player);
native!(Player_GetID, player: struct Player, -> i32);
native!(Player_SendClientMessage, player: struct Player, color: u32, text: str, -> bool);
native!(Player_SetCameraPos, player: struct Player, x: f32, y: f32, z: f32, -> bool);
native!(Player_SetDrunkLevel, player: struct Player, level: i32, -> bool);
native!(Player_SetInterior, player: struct Player, interior: i32, -> bool);
native!(Player_SetWantedLevel, player: struct Player, level: i32, -> bool);
native!(Player_SetWeather, player: struct Player, weather: i32, -> bool);
native!(Player_GetWeather, player: struct Player, -> i32);
native!(Player_SetSkin, player: struct Player, skin: i32, -> bool);
native!(Player_SetShopName, player: struct Player, name: str, -> bool);
native!(Player_GiveMoney, player: struct Player, amount: i32, -> bool);
native!(Player_SetCameraLookAt, player: struct Player, x: f32, y: f32, z: f32, cutType: i32, -> bool);
native!(Player_SetCameraBehind, player: struct Player, -> bool);
native!(Player_CreateExplosion, player: struct Player, x: f32, y: f32, z: f32, explosion_type: i32, radius: f32, -> bool);
native!(Player_PlayAudioStream, player: struct Player, url: str, x: f32, y: f32, z: f32, distance: f32, usePos: bool, -> bool);
native!(Player_StopAudioStream, player: struct Player, -> bool);
native!(Player_ToggleWidescreen, player: struct Player, enable: bool, -> bool);
native!(Player_IsWidescreenToggled, player: struct Player, -> bool);
native!(Player_SetHealth, player: struct Player, health: f32, -> bool);
native!(Player_GetHealth, player: struct Player, -> f32);
native!(Player_SetArmor, player: struct Player, armor: f32, -> bool);
native!(Player_GetArmor, player: struct Player, -> f32);
native!(Player_SetTeam, player: struct Player, team: i32, -> bool);
native!(Player_GetTeam, player: struct Player, -> i32);
native!(Player_SetScore, player: struct Player, score: i32, -> bool);
native!(Player_GetScore, player: struct Player, -> i32);
native!(Player_GetSkin, player: struct Player, -> i32);
native!(Player_SetColor, player: struct Player, color: u32, -> bool);
native!(Player_GetColor, player: struct Player, -> u32);
native!(Player_GetDefaultColor, player: struct Player, -> u32);
native!(Player_GetDrunkLevel, player: struct Player, -> i32);
native!(Player_GiveWeapon, player: struct Player, weapon: i32, ammo: i32, -> bool);
native!(Player_RemoveWeapon, player: struct Player, weapon: i32, -> bool);
native!(Player_GetMoney, player: struct Player, -> i32);
native!(Player_ResetMoney, player: struct Player, -> bool);
native!(Player_SetName, player: struct Player, name: str, -> i32);
native!(Player_GetName, player: struct Player, name: mut str, name_len: usize, -> i32);
native!(Player_GetState, player: struct Player, -> i32);
native!(Player_GetPing, player: struct Player, -> i32);
native!(Player_GetWeapon, player: struct Player, -> i32);
native!(Player_SetTime, player: struct Player, hour: i32, minute: i32, -> bool);
native!(Player_GetTime, player: struct Player, hour: mut i32, minute: mut i32, -> bool);
native!(Player_ToggleClock, player: struct Player, enable: bool, -> bool);
native!(Player_HasClock, player: struct Player, -> bool);
native!(Player_ForceClassSelection, player: struct Player, -> bool);
native!(Player_GetWantedLevel, player: struct Player, -> i32);
native!(Player_SetFightingStyle, player: struct Player, style: i32, -> bool);
native!(Player_GetFightingStyle, player: struct Player, -> i32);
native!(Player_SetVelocity, player: struct Player, x: f32, y: f32, z: f32, -> bool);
native!(Player_GetVelocity, player: struct Player, x: mut f32, y: mut f32, z: mut f32, -> bool);
native!(Player_GetCameraPos, player: struct Player, x: mut f32, y: mut f32, z: mut f32, -> bool);
native!(Player_GetDistanceFromPoint, player: struct Player, x: f32, y: f32, z: f32, -> f32);
native!(Player_GetInterior, player: struct Player, -> i32);
native!(Player_SetPos, player: struct Player, x: f32, y: f32, z: f32, -> bool);
native!(Player_GetPos, player: struct Player, x: mut f32, y: mut f32, z: mut f32, -> bool);
native!(Player_GetVirtualWorld, player: struct Player, -> i32);
native!(Player_IsNPC, player: struct Player, -> bool);
native!(Player_IsStreamedIn, player: struct Player, other: struct Player, -> bool);
native!(Player_PlayGameSound, player: struct Player, sound: i32, x: f32, y: f32, z: f32, -> bool);
native!(Player_SpectatePlayer, player: struct Player, target: struct Player, mode: i32, -> bool);
native!(Player_SpectateVehicle, player: struct Player, target: struct Vehicle, mode: i32, -> bool);
native!(Player_SetVirtualWorld, player: struct Player, vw: i32, -> bool);
native!(Player_SetWorldBounds, player: struct Player, xMax: f32, xMin: f32, yMax: f32, yMin: f32, -> bool);
native!(Player_ClearWorldBounds, player: struct Player, -> bool);
native!(Player_GetWorldBounds, player: struct Player, xmax: mut f32, xmin: mut f32, ymax: mut f32, ymin: mut f32, -> bool);
native!(Player_ClearAnimations, player: struct Player, syncType: i32, -> bool);
native!(Player_GetLastShotVectors, player: struct Player, origin_x: mut f32, origin_y: mut f32, origin_z: mut f32, hit_x: mut f32, hit_y: mut f32, hit_z: mut f32, -> bool);
native!(Player_GetCameraTargetPlayer, player: struct Player, -> struct Player);
native!(Player_GetCameraTargetActor, player: struct Player, -> struct Actor);
native!(Player_GetCameraTargetObject, player: struct Player, -> struct Object);
native!(Player_GetCameraTargetVehicle, player: struct Player, -> struct Vehicle);
native!(Player_PutInVehicle, player: struct Player, vehicle: struct Vehicle, seat: i32, -> bool);
native!(Player_RemoveBuilding, player: struct Player, model: i32, x: f32, y: f32, z: f32, radius: f32, -> bool);
native!(Player_GetBuildingsRemoved, player: struct Player, -> i32);
native!(Player_RemoveFromVehicle, player: struct Player, force: bool,  -> bool);
native!(Player_RemoveMapIcon, player: struct Player, icon: i32, -> bool);
native!(Player_SetMapIcon, player: struct Player, iconID: i32, x: f32, y: f32, z: f32, icon_type: i32, color: u32, style: i32, -> bool);
native!(Player_ResetWeapons, player: struct Player, -> bool);
native!(Player_SetAmmo, player: struct Player, id: u8, ammo: u32, -> bool);
native!(Player_SetArmedWeapon, player: struct Player, weapon: u8, -> bool);
native!(Player_SetChatBubble, player: struct Player, text: str, color: u32, drawdistance: f32, expiretime: i32, -> bool);
native!(Player_SetPosFindZ, player: struct Player, x: f32, y: f32, z: f32, -> bool);
native!(Player_SetSkillLevel, player: struct Player, weapon: u8, level: i32, -> bool);
native!(Player_SetSpecialAction, player: struct Player, action: u32, -> bool);
native!(Player_ShowNameTagForPlayer, player: struct Player, other: struct Player, enable: bool, -> bool);
native!(Player_ToggleControllable, player: struct Player, enable: bool, -> bool);
native!(Player_ToggleSpectating, player: struct Player, enable: bool, -> bool);
native!(Player_ApplyAnimation, player: struct Player, animlib: str, animname: str, delta: f32, anim_loop: bool, lockX: bool, lockY: bool, freeze: bool, time: u32, sync: i32, -> bool);
native!(Player_GetAnimationName, index: i32, lib: mut str, lib_len: usize, name: mut str, name_len: usize, -> bool);
native!(Player_EditAttachedObject, player: struct Player, index: i32, -> bool);
native!(Player_EnableCameraTarget, player: struct Player, enable: bool, -> bool);
native!(Player_EnableStuntBonus, player: struct Player, enable: bool, -> bool);
native!(Player_GetPlayerAmmo, player: struct Player, -> i32);
native!(Player_GetAnimationIndex, player: struct Player, -> i32);
native!(Player_GetFacingAngle, player: struct Player, -> f32);
native!(Player_GetIp, player: struct Player, ip: mut str, ip_len: usize, -> i32);
native!(Player_GetSpecialAction, player: struct Player, -> i32);
native!(Player_GetVehicleID, player: struct Player, -> i32);
native!(Player_GetVehicleSeat, player: struct Player, -> i32);
native!(Player_GetWeaponData, player: struct Player, slot: i32, weaponid: mut i32, ammo: mut i32, -> bool);
native!(Player_GetWeaponState, player: struct Player, -> i32);
native!(Player_InterpolateCameraPos, player: struct Player, from_x: f32, from_y: f32, from_z: f32, to_x: f32, to_y: f32, to_z: f32, time: i32, cut: i32, -> bool);
native!(Player_InterpolateCameraLookAt, player: struct Player, from_x: f32, from_y: f32, from_z: f32, to_x: f32, to_y: f32, to_z: f32, time: i32, cut: i32, -> bool);
native!(Player_IsPlayerAttachedObjectSlotUsed, player: struct Player, index: i32, -> bool);
native!(Player_AttachCameraToObject, player: struct Player, object: struct Object, -> bool);
native!(Player_AttachCameraToPlayerObject, player: struct Player, object: struct PlayerObject, -> bool);
native!(Player_GetCameraAspectRatio, player: struct Player, -> f32);
native!(Player_GetCameraFrontVector, player: struct Player, x: mut f32, y: mut f32, z: mut f32, -> bool);
native!(Player_GetCameraMode, player: struct Player, -> i32);
native!(Player_GetKeys, player: struct Player, keys: mut i32, updown: mut i32, leftright: mut i32, -> bool);
native!(Player_GetSurfingVehicle, player: struct Player, -> struct Vehicle);
native!(Player_GetSurfingObject, player: struct Player, -> struct Object);
native!(Player_GetTargetPlayer, player: struct Player, -> struct Player);
native!(Player_GetTargetActor, player: struct Player, -> struct Player);
native!(Player_IsInVehicle, player: struct Player, targetVehicle: struct Vehicle, -> bool);
native!(Player_IsInAnyVehicle, player: struct Player, -> bool);
native!(Player_IsInRangeOfPoint, player: struct Player, range: f32, x: f32, y: f32, z: f32, -> bool);
native!(Player_PlayCrimeReport, player: struct Player, suspect: struct Player, crime: i32, -> bool);
native!(Player_RemoveAttachedObject, player: struct Player, index: i32, -> bool);
native!(Player_SetAttachedObject, player: struct Player, index: i32, modelid: i32, bone: i32, offsetX: f32, offsetY: f32, offsetZ: f32, rotationX: f32, rotationY: f32, rotationZ: f32, scaleX: f32, scaleY: f32, scaleZ: f32, materialcolor1: u32, materialcolor2: u32, -> bool);
native!(Player_GetAttachedObject, player: struct Player, index: i32, modelid: mut i32, bone: mut i32, offsetX: mut f32, offsetY: mut f32, offsetZ: mut f32, rotationX: mut f32, rotationY: mut f32, rotationZ: mut f32, scaleX: mut f32, scaleY: mut f32, scaleZ: mut f32, materialcolor1: mut i32, materialcolor2: mut i32, -> bool);
native!(Player_SetFacingAngle, player: struct Player, angle: f32, -> bool);
native!(Player_SetMarkerForPlayer, player: struct Player, other: struct Player, color: u32, -> bool);
native!(Player_GetMarkerForPlayer, player: struct Player, other: struct Player, -> u32);
native!(Player_AllowTeleport, player: struct Player, allow: bool, -> bool);
native!(Player_IsTeleportAllowed, player: struct Player, -> bool);
native!(Player_DisableRemoteVehicleCollisions, player: struct Player, disable: bool, -> bool);
native!(Player_GetCameraZoom, player: struct Player, -> f32);
native!(Player_SelectTextDraw, player: struct Player, hoverColour: u32, -> bool);
native!(Player_CancelSelectTextDraw, player: struct Player, -> bool);
native!(Player_SendClientCheck, player: struct Player, actionType: i32, address: i32, offset: i32, count: i32, -> bool);
native!(Player_Spawn, player: struct Player, -> bool);
native!(Player_GPCI, player: struct Player, gpci: mut str, gpci_len: usize, -> bool);
native!(Player_IsAdmin, player: struct Player, -> bool);
native!(Player_Kick, player: struct Player, -> bool);
native!(Player_ShowGameText, player: struct Player, text: str, time: i32, style: i32, -> bool);
native!(Player_HideGameText, player: struct Player, style: i32, -> bool);
native!(Player_HasGameText, player: struct Player, style: i32, -> bool);
native!(Player_GetGameText, player: struct Player, style: i32, message: mut str, message_len: usize, time: mut i32, remaining: mut i32, -> bool);
native!(Player_Ban, player: struct Player, -> bool);
native!(Player_BanEx, player: struct Player, reason: str, -> bool);
native!(Player_SendDeathMessage, player: struct Player, killer: struct Player, killee: struct Player, weapon: i32, -> bool);
native!(Player_SendMessageToPlayer, player: struct Player, sender: struct Player, message: str, -> bool);
native!(Player_GetVersion, player: struct Player, version: mut str, version_len: usize, -> i32);
native!(Player_GetSkillLevel, player: struct Player, skill: i32, -> i32);
native!(Player_GetZAim, player: struct Player, -> f32);
native!(Player_GetSurfingOffsets, player: struct Player, offsetX: mut f32, offsetY: mut f32, offsetZ: mut f32, -> bool);
native!(Player_GetRotationQuat, player: struct Player, x: mut f32, y: mut f32, z: mut f32, w: mut f32, -> bool);
native!(Player_GetPlayerSpectateID, player: struct Player, -> i32);
native!(Player_GetSpectateType, player: struct Player, -> i32);
native!(Player_GetRawIp, player: struct Player, -> u32);
native!(Player_SetGravity, player: struct Player, gravity: f32, -> bool);
native!(Player_GetGravity, player: struct Player, -> f32);
native!(Player_SetAdmin, player: struct Player, set: bool, -> bool);
native!(Player_IsSpawned, player: struct Player, -> bool);
native!(Player_IsControllable, player: struct Player, -> bool);
native!(Player_IsCameraTargetEnabled, player: struct Player, -> bool);
native!(Player_ToggleGhostMode, player: struct Player, toggle: bool, -> bool);
native!(Player_GetGhostMode, player: struct Player, -> bool);
native!(Player_AllowWeapons, player: struct Player, allow: bool, -> bool);
native!(Player_AreWeaponsAllowed, player: struct Player, -> bool);
native!(Player_IsPlayerUsingOfficialClient, player: struct Player, -> bool);
native!(Player_GetAnimationFlags, player: struct Player, -> i32);
native!(Player_IsInDriveByMode, player: struct Player, -> bool);
native!(Player_IsCuffed, player: struct Player, -> bool);
native!(Player_IsInModShop, player: struct Player, -> bool);
native!(Player_GetSirenState, player: struct Player, -> i32);
native!(Player_GetLandingGearState, player: struct Player, -> i32);
native!(Player_GetHydraReactorAngle, player: struct Player, -> u32);
native!(Player_GetTrainSpeed, player: struct Player, -> f32);
native!(Player_IsPlayerUsingOmp, player: struct Player, -> bool);

#[doc(hidden)]
pub fn load_functions() {
    load_function!(Player_SetSpawnInfo);
    load_function!(Player_GetSpawnInfo);
    load_function!(Player_GetNetworkStats);
    load_function!(Player_NetStatsBytesReceived);
    load_function!(Player_NetStatsBytesSent);
    load_function!(Player_NetStatsConnectionStatus);
    load_function!(Player_NetStatsGetConnectedTime);
    load_function!(Player_NetStatsGetIpPort);
    load_function!(Player_NetStatsMessagesReceived);
    load_function!(Player_NetStatsMessagesRecvPerSecond);
    load_function!(Player_NetStatsMessagesSent);
    load_function!(Player_NetStatsPacketLossPercent);
    load_function!(Player_GetCustomSkin);
    load_function!(Player_GetDialog);
    load_function!(Player_GetDialogData);
    load_function!(Player_GetMenu);
    load_function!(Player_GetSurfingPlayerObject);
    load_function!(Player_GetCameraTargetPlayerObject);
    load_function!(Player_FromID);
    load_function!(Player_GetID);
    load_function!(Player_SendClientMessage);
    load_function!(Player_SetCameraPos);
    load_function!(Player_SetDrunkLevel);
    load_function!(Player_SetInterior);
    load_function!(Player_SetWantedLevel);
    load_function!(Player_SetWeather);
    load_function!(Player_GetWeather);
    load_function!(Player_SetSkin);
    load_function!(Player_SetShopName);
    load_function!(Player_GiveMoney);
    load_function!(Player_SetCameraLookAt);
    load_function!(Player_SetCameraBehind);
    load_function!(Player_CreateExplosion);
    load_function!(Player_PlayAudioStream);
    load_function!(Player_StopAudioStream);
    load_function!(Player_ToggleWidescreen);
    load_function!(Player_IsWidescreenToggled);
    load_function!(Player_SetHealth);
    load_function!(Player_GetHealth);
    load_function!(Player_SetArmor);
    load_function!(Player_GetArmor);
    load_function!(Player_SetTeam);
    load_function!(Player_GetTeam);
    load_function!(Player_SetScore);
    load_function!(Player_GetScore);
    load_function!(Player_GetSkin);
    load_function!(Player_SetColor);
    load_function!(Player_GetColor);
    load_function!(Player_GetDefaultColor);
    load_function!(Player_GetDrunkLevel);
    load_function!(Player_GiveWeapon);
    load_function!(Player_RemoveWeapon);
    load_function!(Player_GetMoney);
    load_function!(Player_ResetMoney);
    load_function!(Player_SetName);
    load_function!(Player_GetName);
    load_function!(Player_GetState);
    load_function!(Player_GetPing);
    load_function!(Player_GetWeapon);
    load_function!(Player_SetTime);
    load_function!(Player_GetTime);
    load_function!(Player_ToggleClock);
    load_function!(Player_HasClock);
    load_function!(Player_ForceClassSelection);
    load_function!(Player_GetWantedLevel);
    load_function!(Player_SetFightingStyle);
    load_function!(Player_GetFightingStyle);
    load_function!(Player_SetVelocity);
    load_function!(Player_GetVelocity);
    load_function!(Player_GetCameraPos);
    load_function!(Player_GetDistanceFromPoint);
    load_function!(Player_GetInterior);
    load_function!(Player_SetPos);
    load_function!(Player_GetPos);
    load_function!(Player_GetVirtualWorld);
    load_function!(Player_IsNPC);
    load_function!(Player_IsStreamedIn);
    load_function!(Player_PlayGameSound);
    load_function!(Player_SpectatePlayer);
    load_function!(Player_SpectateVehicle);
    load_function!(Player_SetVirtualWorld);
    load_function!(Player_SetWorldBounds);
    load_function!(Player_ClearWorldBounds);
    load_function!(Player_GetWorldBounds);
    load_function!(Player_ClearAnimations);
    load_function!(Player_GetLastShotVectors);
    load_function!(Player_GetCameraTargetPlayer);
    load_function!(Player_GetCameraTargetActor);
    load_function!(Player_GetCameraTargetObject);
    load_function!(Player_GetCameraTargetVehicle);
    load_function!(Player_PutInVehicle);
    load_function!(Player_RemoveBuilding);
    load_function!(Player_GetBuildingsRemoved);
    load_function!(Player_RemoveFromVehicle);
    load_function!(Player_RemoveMapIcon);
    load_function!(Player_SetMapIcon);
    load_function!(Player_ResetWeapons);
    load_function!(Player_SetAmmo);
    load_function!(Player_SetArmedWeapon);
    load_function!(Player_SetChatBubble);
    load_function!(Player_SetPosFindZ);
    load_function!(Player_SetSkillLevel);
    load_function!(Player_SetSpecialAction);
    load_function!(Player_ShowNameTagForPlayer);
    load_function!(Player_ToggleControllable);
    load_function!(Player_ToggleSpectating);
    load_function!(Player_ApplyAnimation);
    load_function!(Player_GetAnimationName);
    load_function!(Player_EditAttachedObject);
    load_function!(Player_EnableCameraTarget);
    load_function!(Player_EnableStuntBonus);
    load_function!(Player_GetPlayerAmmo);
    load_function!(Player_GetAnimationIndex);
    load_function!(Player_GetFacingAngle);
    load_function!(Player_GetIp);
    load_function!(Player_GetSpecialAction);
    load_function!(Player_GetVehicleID);
    load_function!(Player_GetVehicleSeat);
    load_function!(Player_GetWeaponData);
    load_function!(Player_GetWeaponState);
    load_function!(Player_InterpolateCameraPos);
    load_function!(Player_InterpolateCameraLookAt);
    load_function!(Player_IsPlayerAttachedObjectSlotUsed);
    load_function!(Player_AttachCameraToObject);
    load_function!(Player_AttachCameraToPlayerObject);
    load_function!(Player_GetCameraAspectRatio);
    load_function!(Player_GetCameraFrontVector);
    load_function!(Player_GetCameraMode);
    load_function!(Player_GetKeys);
    load_function!(Player_GetSurfingVehicle);
    load_function!(Player_GetSurfingObject);
    load_function!(Player_GetTargetPlayer);
    load_function!(Player_GetTargetActor);
    load_function!(Player_IsInVehicle);
    load_function!(Player_IsInAnyVehicle);
    load_function!(Player_IsInRangeOfPoint);
    load_function!(Player_PlayCrimeReport);
    load_function!(Player_RemoveAttachedObject);
    load_function!(Player_SetAttachedObject);
    load_function!(Player_GetAttachedObject);
    load_function!(Player_SetFacingAngle);
    load_function!(Player_SetMarkerForPlayer);
    load_function!(Player_GetMarkerForPlayer);
    load_function!(Player_AllowTeleport);
    load_function!(Player_IsTeleportAllowed);
    load_function!(Player_DisableRemoteVehicleCollisions);
    load_function!(Player_GetCameraZoom);
    load_function!(Player_SelectTextDraw);
    load_function!(Player_CancelSelectTextDraw);
    load_function!(Player_SendClientCheck);
    load_function!(Player_Spawn);
    load_function!(Player_GPCI);
    load_function!(Player_IsAdmin);
    load_function!(Player_Kick);
    load_function!(Player_ShowGameText);
    load_function!(Player_HideGameText);
    load_function!(Player_HasGameText);
    load_function!(Player_GetGameText);
    load_function!(Player_Ban);
    load_function!(Player_BanEx);
    load_function!(Player_SendDeathMessage);
    load_function!(Player_SendMessageToPlayer);
    load_function!(Player_GetVersion);
    load_function!(Player_GetSkillLevel);
    load_function!(Player_GetZAim);
    load_function!(Player_GetSurfingOffsets);
    load_function!(Player_GetRotationQuat);
    load_function!(Player_GetPlayerSpectateID);
    load_function!(Player_GetSpectateType);
    load_function!(Player_GetRawIp);
    load_function!(Player_SetGravity);
    load_function!(Player_GetGravity);
    load_function!(Player_SetAdmin);
    load_function!(Player_IsSpawned);
    load_function!(Player_IsControllable);
    load_function!(Player_IsCameraTargetEnabled);
    load_function!(Player_ToggleGhostMode);
    load_function!(Player_GetGhostMode);
    load_function!(Player_AllowWeapons);
    load_function!(Player_AreWeaponsAllowed);
    load_function!(Player_IsPlayerUsingOfficialClient);
    load_function!(Player_GetAnimationFlags);
    load_function!(Player_IsInDriveByMode);
    load_function!(Player_IsCuffed);
    load_function!(Player_IsInModShop);
    load_function!(Player_GetSirenState);
    load_function!(Player_GetLandingGearState);
    load_function!(Player_GetHydraReactorAngle);
    load_function!(Player_GetTrainSpeed);
    load_function!(Player_IsPlayerUsingOmp);
}
